name: CI - Docker Compose & Integração & Desempenho
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
jobs:
  ci-integration-performance:
    runs-on: ubuntu-latest
    permissions:
          contents: read
          packages: write  # Aumentar para write para garantir acesso completo às imagens
    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v3
        
      - name: Verificar diretório e listar arquivos
        run: |
          pwd
          ls -la
      
      - name: Criar .env para o backend
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> backend/.env
          echo "SECRET_KEY_LOGIN=${{ secrets.SECRET_KEY_LOGIN }}" >> backend/.env
          echo "SECRET_KEY_SIGNUP=${{ secrets.SECRET_KEY_SIGNUP }}" >> backend/.env
          echo "SECRET_KEY_RECOVERY=${{ secrets.SECRET_KEY_RECOVERY }}" >> backend/.env
          echo "ALGORITHM=${{ secrets.ALGORITHM }}" >> backend/.env
          echo "EXPIRE_MINUTES_LOGIN=${{ secrets.EXPIRE_MINUTES_LOGIN }}" >> backend/.env
          echo "EXPIRE_MINUTES_SIGNUP=${{ secrets.EXPIRE_MINUTES_SIGNUP }}" >> backend/.env
          echo "UPLOAD_DIR_ORCAMENTO=${{ secrets.UPLOAD_DIR_ORCAMENTO }}" >> backend/.env
          echo "UPLOAD_DIR_RECURSO=${{ secrets.UPLOAD_DIR_RECURSO }}" >> backend/.env
          echo "RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}" >> backend/.env
      
      - name: Login to GitHub Container Registry
        # Logs in to pull private base images (e.g., database) if needed
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Configurar Docker Buildx
        # Sets up Docker buildx for potentially faster/better builds
        uses: docker/setup-buildx-action@v2

      # Nova etapa: Restaurar cache de imagens Docker
      - name: Restaurar cache de imagens Docker
        uses: actions/cache@v3
        id: docker-cache
        with:
          path: docker-cache
          key: ${{ runner.os }}-docker-images-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-images-

      # Nova etapa: Carregar imagens Docker do cache, se disponível
      - name: Carregar imagens Docker do cache
        if: steps.docker-cache.outputs.cache-hit == 'true'
        run: |
          echo "Cache de imagens Docker encontrado! Carregando imagens..."
          for tar_file in docker-cache/*.tar; do
            [ -f "$tar_file" ] && docker load -i "$tar_file" || echo "Nenhum arquivo .tar encontrado"
          done
          docker images

      - name: Up os containers com Docker Compose
        # Builds images (if needed) and starts services in detached mode
        # Assumes docker-compose.yml is in the repository root
        run: docker compose up -d --build

      - name: Verificar se os containers estão rodando
        run: |
          docker ps
          echo "Containers ativos acima ^^"

      - name: Esperar que a API esteja pronta (Health Check)
        # Waits for the backend service (assumed on port 8000 and has /api/health endpoint)
        # Adjust URL, port, and timeout as needed
        run: |
          echo "Waiting for API to be ready..."
          # Retry every 5 seconds for up to 60 seconds (12 retries)
          timeout 60s bash -c 'until curl --fail --output /dev/null --silent http://localhost:8000/api/health; do echo "Waiting..."; sleep 5; done' \
            || (echo "API failed to start in time!" && docker compose logs && exit 1) # Show logs on timeout
          echo "API is ready!"

      - name: Instalar dependências Python para testes
        # Sets up a venv on the runner to run tests from the host
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install httpx pytest

      - name: Correr testes de conexão e performance
        # Runs pytest against the specified test file
        run: |
          source venv/bin/activate
          pytest backend/tests/test_performance.py
      
      - name: Salvar imagens Docker em cache
        if: always()
        run: |
          mkdir -p docker-cache
          docker images --format '{{.Repository}}:{{.Tag}}' | grep -v '<none>' | xargs -I {} sh -c 'docker save -o docker-cache/$(echo {} | tr "/:" "__").tar {}'

      - name: Configurar cache para imagens Docker salvas
        uses: actions/cache@v3
        with:
          path: docker-cache
          key: ${{ runner.os }}-docker-images-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-images-

      - name: Logs dos containers em caso de falha
        # If any step failed previously, show the logs from all services
        if: failure()
        run: docker compose logs

      - name: Parar e remover containers
        # Always runs to clean up Docker resources
        if: always()
        run: docker compose down -v --remove-orphans
