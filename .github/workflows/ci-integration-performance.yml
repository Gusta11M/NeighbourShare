name: CI - Docker Compose & Integração & Desempenho
on:
  push:
    branches: RNFTests
jobs:
  login:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v3
      
      - name: Criar .env para o backend
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> backend/.env
          echo "SECRET_KEY_LOGIN=${{ secrets.SECRET_KEY_LOGIN }}" >> backend/.env
          echo "SECRET_KEY_SIGNUP=${{ secrets.SECRET_KEY_SIGNUP }}" >> backend/.env
          echo "SECRET_KEY_RECOVERY=${{ secrets.SECRET_KEY_RECOVERY }}" >> backend/.env
          echo "ALGORITHM=${{ secrets.ALGORITHM }}" >> backend/.env
          echo "EXPIRE_MINUTES_LOGIN=${{ secrets.EXPIRE_MINUTES_LOGIN }}" >> backend/.env
          echo "EXPIRE_MINUTES_SIGNUP=${{ secrets.EXPIRE_MINUTES_SIGNUP }}" >> backend/.env
          echo "UPLOAD_DIR_ORCAMENTO=${{ secrets.UPLOAD_DIR_ORCAMENTO }}" >> backend/.env
          echo "UPLOAD_DIR_RECURSO=${{ secrets.UPLOAD_DIR_RECURSO }}" >> backend/.env
          echo "RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}" >> backend/.env
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Configurar Docker e Docker Compose
        uses: docker/setup-buildx-action@v2
      
      - name: Instalar Docker Compose
        run: |
          docker compose version || {
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            docker-compose version
          }
      
      - name: Up os containers com Docker Compose
        run: docker-compose up -d --build
      
      - name: Verificar se os containers estão rodando
        run: |
          docker ps
          echo "Containers ativos acima ^^"
      
      - name: Esperar que os serviços estejam prontos
        run: |
          echo "Aguardar 20 segundos para garantir que a API está ativa..."
          sleep 20
          # Opcionalmente, podemos verificar a disponibilidade da API
          # curl --retry 10 --retry-delay 5 --retry-connrefused http://localhost:8000/health || echo "API pode não estar respondendo, mas continuaremos os testes"
      
      - name: Instalar dependências Python
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install httpx pytest
      
      - name: Correr testes de conexão e performance
        run: |
          source venv/bin/activate
          pytest backend/tests/test_performance.py
      
      - name: Logs dos containers em caso de falha
        if: failure()
        run: docker-compose logs
